# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from PIL import ImageGrab
from TestTool.init import *
from TestTool.control import *


class SeleniumTest():
  
  
  def setup_method(self):
    init_log("selenium.log",logging.INFO)
    start_test(os.path.basename(__file__))
    self.vars={}
    read_config(self,"../config.ini")

    try:
      self.driver = init_driver(self)
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
  def teardown_method(self):
    end_test(os.path.basename(__file__))
    self.driver.quit()

  def Test_0004(self):
    logging.info('Test_0004 Start')
    connect_web(self)
    login_web(self,self.vars["account_user"][0],self.vars["account_password"][0])

    check_text(self,By.XPATH,"//li[2]/div/span/span","Infrastructure","Find Infrastructure")
    click_button(self,By.XPATH,"//li[2]/div/span/span","Infrastructure","click Infrastructure")


    check_text(self,By.XPATH,"//ul[@id='/admin/infra_mgmt$Menu']/li","Host","Find Host")
    click_button(self,By.XPATH,"//ul[@id='/admin/infra_mgmt$Menu']/li","Host","click Host")

    #### select the open stack platform
    #try:
    #  logging.info('Find Host')
    #  click_host=self.driver.find_element(By.XPATH, "//div[2]/div/div[2]/div/div/div/div/div/div/div")
    #  highlight(click_host)
    #  #if click_host.text=="Host":
    #  ActionChains(self.driver).move_to_element(click_host).click(click_host).perform()
    #except:
    #  logging.error('Check login error', exc_info=True)
    #  logging.error("NOT PASS!!!!")
    #  self.driver.quit()

    #try:
    #  logging.info('Find Host')
    #  click_host=self.driver.find_element(By.XPATH, "//li[contains(.,'default_openstack')]")
    #  highlight(click_host)
    #  #if click_host.text=="Host":
    #  ActionChains(self.driver).move_to_element(click_host).click(click_host).perform()
    #except:
    #  logging.error('Check login error', exc_info=True)
    #  logging.error("NOT PASS!!!!")
    #  self.driver.quit()

    host_dict = {}
    try:
      for i in range(1, 10, 1):
        host_key=get_text(self,By.XPATH,"//tr[%s]/td[%s]/span" % (str(i),1),"test")
        if host_key =="":
          break
        check_text(self,By.XPATH,"//tr[%s]/td[%s]/span" % (str(i),2),"Up","check host status")
        host_value=get_text(self,By.XPATH,"//tr[%s]/td[%s]/span" % (str(i),4),"test")
        host_dict[host_key]=host_value

    except:
      logging.info("Select host dict success")

    try:
        for host in self.vars["k8s_name"]:
          logging.info("%s=%s",host,host_dict[host])
    except:
      logging.error("k8s Host not match. Target host = %s",host)
      logging.error("NOT PASS!!!!")
      self.driver.quit() 
    time.sleep(int(self.vars["DelayTime"]))

if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.Test_0004()
  driver.teardown_method()