# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from TestTool.init import *
from TestTool.control import *
from TestTool.task import *
class SeleniumTest():
  def setup_method(self):
    init_log("selenium.log",logging.INFO)
    start_test(os.path.basename(__file__))
    self.vars={}
    read_config(self,"../config.ini")

    try:
      self.driver = init_driver(self)
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
  
  def teardown_method(self):
    end_test(os.path.basename(__file__))
    self.driver.quit()
    
  def SA_0019(self):
    connect_web(self)
    login_web(self,self.vars["account_user"][0],self.vars["account_password"][0])
    # Check login  
    check_text(self,By.XPATH,"//div[4]/button/span/span[2]",self.vars["account_user"][0],"check login")
    # Check login  
    check_text(self,By.XPATH,"//div[4]/button/span/span[2]",self.vars["account_user"][0],"check login")   
    
    check_text(self,By.XPATH,"//li[3]/div/span/span","Users","check Users")
    click_button(self,By.XPATH,"//li[3]/div/span/span","Users","click Users")
    
    check_text(self,By.XPATH,"//li[3]/ul/li/span/span","User Management","check User Management")
    click_button(self,By.XPATH,"//li[3]/ul/li/span/span","User Management","check User Management")
    
    time.sleep(3)
    try:
      logging.info("scroll to mid")
      scroll_down="document.evaluate('/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[2]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.scroll(0,%s)" % ("10000")
      get_scroll_height="return document.evaluate('/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[2]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.scrollTop"
      self.driver.execute_script(scroll_down)
      scroll_height=int(self.driver.execute_script(get_scroll_height))
      scroll_down_mid="return document.evaluate('/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[2]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.scroll(0,%s)" % (scroll_height/2)
      self.driver.execute_script(scroll_down_mid)
    except:
      logging.error("scroll error")

    select_success=False
    for host in self.vars["account_user"]:
      select_success=delete_user(self,host)
    
    if select_success == False:
      logging.error("No user delete")
      self.driver.quit()

    if select_success == True:
      click_button(self,By.XPATH,"//button[3]//span[1]","","Delete user")
      click_button(self,By.XPATH,"/html[1]/body[1]/div[3]/div[2]/div[3]/button[2]/span[1]","Confirm","Confirm Delete user")

    if select_success == True:
      account_user_dict = {}
      for i in range(2, 50, 1):
        ### get User Management
        user_target = "//tr[%d]/td[3]/span/a" % (i)
        username=(get_text(self,By.XPATH,user_target,"get User Management "))
        ### get User E-mail
        email_target = "//tr[%d]/td[4]/span" % (i)
        email=(get_text(self,By.XPATH,email_target,"get User Email "))

        logging.info('get user name = %s',username)
        logging.info('get user email = %s',email)

        if username=="":
          break
        ### record current user list 
        account_user_dict[username]=email
      
      ### check user delete success 
      for host in self.vars["account_user"]:
        try:
          if account_user_dict[host] != "":
            logging.error("user delete error (%s not delete)",host)
            self.driver.quit()
        except:
          logging.info('delete host success = %s',host)
    

if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.SA_0019()
  driver.teardown_method()