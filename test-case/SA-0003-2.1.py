# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from TestTool.init import *
from TestTool.control import *


class SeleniumTest():
  
  
  def setup_method(self):
    init_log("selenium.log",logging.INFO)
    start_test(os.path.basename(__file__))
    self.vars={}
    read_config(self,"../config.ini")

    try:
      self.driver = init_driver(self)
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
  def teardown_method(self):
    end_test(os.path.basename(__file__))
    self.driver.quit()
 
  def SA_0003(self):
    connect_web(self)
    login_web(self,self.vars["account_user"][0],self.vars["account_password"][0])
    check_text(self,By.XPATH,"//li/span/span","Modules","check module")
    click_button(self,By.XPATH,"//li/span/span","Modules","click module button")


    module_dict = {}
    try:
      for i in range(1, 6, 1):
        
        module_key=get_text(self,By.XPATH,"//tr[%s]/td[%s]/span"% (str(i),1),"get module_key")
        module_value=get_text(self,By.XPATH,"//tr[%s]/td[%s]/span"% (str(i),2),"get module_value")
        logging.info('Find Modules %s = %s',module_key,module_value)
        module_dict[module_key]=module_value
    except:
      logging.error("check module item error")
      logging.error("NOT PASS!!!!")

    try:
      if "k8s-container" in module_dict:
        logging.info("check k8s-container success")
      else:
        logging.error("k8s-container container not found")
        print(module_dict["k8s-container"])
        
      if "k8s-job" in module_dict:
        logging.info("check k8s-job success")
      else:
        logging.error("check k8s-job error")
        print(module_dict["k8s-job"])

    except:
        logging.error("check k8s-job error")

    logging.info('########################selenium test stop #########################') 
    time.sleep(int(self.vars["DelayTime"]))

if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.SA_0003()
  driver.teardown_method()