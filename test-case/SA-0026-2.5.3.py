# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from TestTool.init import *
from TestTool.control import *
from TestTool.task import *
class SeleniumTest():
  def setup_method(self):
    init_log("selenium.log",logging.INFO)
    start_test(os.path.basename(__file__))
    self.vars={}
    read_config(self,"../config.ini")

    try:
      self.driver = init_driver(self)
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
  
  def teardown_method(self):
    end_test(os.path.basename(__file__))
    self.driver.quit()

  def SA_0026(self):
    connect_web(self)
    login_web(self,self.vars["account_user"][0],self.vars["account_password"][0])
    click_button(self,By.XPATH,"//li[4]/span/span","Projects","Click project button")
    
    dict_checkstatus={}
    for i in range(1, 50, 1):
      user_target = "//tr[%d]/td[2]/span" % (i)
      username=(get_text(self,By.XPATH,user_target,"Get project name"))
      if username =="":
        break
      count=0
      for project in self.vars["project_name"]:
        if username==project:
          click_button(self,By.XPATH,"//a[contains(.,'%s')]" % (username),username,"Click project %s" % username)
          if get_text(self,By.XPATH,"//td[contains(text(),'%s')]"%(username),"Get project description %s" % username )!=username:
            logging.error("Porject %s name error",username)
            break
          else:
            logging.info("Project %s name success" % username)
          
          if get_text(self,By.XPATH,"//td[contains(text(),'%s')]"%(self.vars["project_description"][count]),"Get project description %s" % self.vars["project_description"][count] )!=self.vars["project_description"][count]:
            logging.error("Porject %s description error",self.vars["project_description"][count])
            break
          else:
            logging.info("Project %s description success " % self.vars["project_description"][count])
          click_button(self,By.XPATH,"//div/div/i[2]","","Close project detail %s" % username)
          logging.info("Project check %s success",username)
          dict_checkstatus[username]="checked"
        count+=1

    for project in self.vars["project_name"]:
      try:
        print(dict_checkstatus[project])
      except:
        logging.error("Check project error %s ",project)
        self.driver.close()
        dict_checkstatus[project]
    logging.info("Check project success")
      
if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.SA_0026()
  driver.teardown_method()