# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from TestTool.init import *
from TestTool.control import *


class SeleniumTest():
  
  
  def setup_method(self):
    init_log("selenium.log",logging.INFO)
    start_test(os.path.basename(__file__))
    self.vars={}
    read_config(self,"../config.ini")

    try:
      self.driver = init_driver(self)
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
  def teardown_method(self):
    end_test(os.path.basename(__file__))
    self.driver.quit()
 
  def Test_0003(self):
    connect_web(self)
    login_web(self,self.vars["account_user"][0],self.vars["account_password"][0])
    check_text(self,By.XPATH,"//ul[@id='/admin$Menu']/li[4]","Projects","check Projects")
    click_button(self,By.XPATH,"//ul[@id='/admin$Menu']/li[4]","Projects","click Projects button")

    check_text(self,By.XPATH,"//div[@id='root']/div/div/div[2]/div[2]/div/div/div[2]/button/span","Create Project","check Project")
    click_button(self,By.XPATH,"//div[@id='root']/div/div/div[2]/div[2]/div/div/div[2]/button/span","Create Project","click Create project button")
    set_text(self,By.XPATH,"//input[@name='name']",'auto-'+self.vars["project_name"][0],"input project name")
    set_text(self,By.XPATH,"//input[@name='desc']",'autotest',"input project name")
    click_button(self,By.XPATH,"//div[3]//div[1]//label[1]//span[1]//span[1]","","click Create project button")
    x=image_recognition(self,By.XPATH,"//div[3]//div[1]//label[1]//span[1]//span[1]")
    print(x[0,0])
    logging.info('########################selenium test stop #########################') 
    time.sleep(int(self.vars["DelayTime"]))

if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.Test_0003()
  driver.teardown_method()