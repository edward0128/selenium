# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from pprint import pprint
from PIL import Image

def highlight(element):
    """Highlights (blinks) a Selenium Webdriver element"""
    driver = element._parent
    def apply_style(s):
        driver.execute_script("arguments[0].setAttribute('style', arguments[1]);",
                              element, s)
    original_style = element.get_attribute('style')
    apply_style("background: blue; border: 1px solid red;")
    time.sleep(1)
    apply_style(original_style)
class SeleniumTest():
  
  
  def setup_method(self):
    # Start the logging
    logging.basicConfig(filename='selenium.log',format='%(levelname)s %(asctime)s %(message)s', level=logging.INFO)
    logging.info('########################selenium test start ########################')
    logging.info('###################### Test_0005-start #############################')
    logging.info('Logging app started')

    # prepare the web driver
    options = Options()
    #options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    #options.add_argument('--headless')
    #options.add_argument("test=/Users/yu-sung/Documents/ci/profile.test")
    #driver = webdriver.Chrome('./chromedriver', chrome_options=options)
    self.vars={}
    
    proDir = os.path.split(os.path.realpath(__file__))[0]
    configPath = os.path.join(proDir, "config.ini")
    config = configparser.ConfigParser()
    config.read(configPath)
    self.vars["grid_servier_url"] = config.get("webdriver","server")
    self.vars["browser"] = config.get("webdriver","browser")
    self.vars["url"] = config.get("xportal","url")
    self.vars["k8s_name"] = config.get("k8s","k8s_name")
    self.vars["k8s_ip"] = config.get("k8s","k8s_ip")
    self.vars["DelayTime"] = config.get("config","DelayTime")
    try:
      self.driver = webdriver.Remote(command_executor=self.vars["grid_servier_url"],desired_capabilities={'browserName': self.vars["browser"], 'javascriptEnabled': False})
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
    
    logging.info('Prepare webdriver Ready')
  def teardown_method(self):
    self.driver.quit()
    logging.info('###################### Test_0005-PASS ##############################')
    
  def Test_0005(self):
    logging.info('Test_0005 Start')
    ########################################    
    #Connet and login to the xportal System
    try:
      self.driver.get(self.vars["url"])
    except:
      logging.error('Connect to the Site Error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()

    try:
      logging.info('Start to login the WebSite')
      self.driver.find_element(By.CSS_SELECTOR, ".login").click()
      self.driver.find_element(By.NAME, "email").click()
      self.driver.find_element(By.NAME, "email").send_keys("admin")
      self.vars["password"] = "password"
      self.driver.find_element(By.NAME, "password").send_keys(self.vars["password"])
      self.driver.find_element(By.CSS_SELECTOR, ".jss82").click()
      self.driver.implicitly_wait(10)
    except:
      logging.error('Connect to the Site Error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()

    try:
      logging.info('Find Infrastructure')
      click_infrastructure=self.driver.find_element(By.XPATH, "//li[2]/div/span/span")
      highlight(click_infrastructure)
      if click_infrastructure.text=="Infrastructure":
        ActionChains(self.driver).move_to_element(click_infrastructure).click(click_infrastructure).perform()
    except:
      logging.error('Check login error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()

    try:
      logging.info('Find host ')
      click_hos=self.driver.find_element(By.XPATH, "//ul[@id='/admin/infra_mgmt$Menu']/li")
      highlight(click_hos)
      #if click_host.text=="Host":
      ActionChains(self.driver).move_to_element(click_hos).click(click_hos).perform()
    except:
      logging.error('Check login error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()
   
    try:
      logging.info('Find open stack ')
      click_host=self.driver.find_element(By.XPATH, "//div[2]/div/div[2]/div/div/div/div/div/div/div")
      highlight(click_host)
      #if click_host.text=="Host":
      ActionChains(self.driver).move_to_element(click_host).click(click_host).perform()
    except:
      logging.error('Check login error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()
    try:
      logging.info('Find Host')
      click_host=self.driver.find_element(By.XPATH, "//li[contains(.,'default_openstack')]")
      highlight(click_host)
      #if click_host.text=="Host":
      ActionChains(self.driver).move_to_element(click_host).click(click_host).perform()
    except:
      logging.error('Check login error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()

    try:
      for i in range(1, 10, 1):
        test=self.driver.find_element(By.XPATH, "//tr[%d]/td[%s]/span" % (i,3))
        highlight(test)
        left = test.location['x']+ (test.size['width'])/2
        top = test.location['y']+ (test.size['height'])/2
        elementWidth = test.location['x']+ (test.size['width'])
        elementHeight = test.location['y']+ (test.size['height'])
        self.driver.get_screenshot_as_file('test.png')
        picture = Image.open('test.png')
        #print(picture.color((left,top)))
        picture = picture.crop((left, top, elementWidth, elementHeight))
        #picture.save('test.png')
        #im = Image.open('test.png')
        pix = picture.load()
        #print(im.size)
        print(pix[0,0])
        data=pix[0,0]
        if data[0]==0:
          status='down'
        else:
          status='up'

        print(status)  
        picture.close()

    
      # logging.info('Find schedule')
      # click_schedule=self.driver.find_element(By.XPATH, "//tr[%d]/td[%s]/span/span/span/span/input" % (i,3))
      # highlight(click_schedule)
      # ActionChains(self.driver).move_to_element(click_schedule).click(click_schedule).perform()
    except:
      logging.error('Check login error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()
        
    
    
    logging.info(status)
    
    

    try:
      logging.info('Find schedule')
      click_schedule=self.driver.find_element(By.XPATH, "//input[@value='']")
      highlight(click_schedule)
      ActionChains(self.driver).move_to_element(click_schedule).click(click_schedule).perform()
    except:
      logging.error('Check login error', exc_info=True)
      logging.error("NOT PASS!!!!")
      self.driver.quit()
   
    # try:
    #   logging.info('click Host name:k8s-1')
    #   click_host=self.driver.find_element(By.XPATH, "//a[contains(text(),'k8s-1')]")
    #   highlight(click_host)
    #   if click_host.text=="k8s-1":
    #      ActionChains(self.driver).move_to_element(click_host).click(click_host).perform()
    # except:
    #   logging.error('Check login error', exc_info=True)
    #   logging.error("NOT PASS!!!!")
    #   self.driver.quit()

    # try:
    #   logging.info('click Host Information')
    #   click_hostinfo=self.driver.find_element(By.XPATH, "//button[3]/span/span/span")
    #   highlight(click_hostinfo)
    #   #if click_hostinfo.text=="Host Information":
    #   ActionChains(self.driver).move_to_element(click_hostinfo).click(click_hostinfo).perform()
    # except:
    #   logging.error('Check login error', exc_info=True)
    #   logging.error("NOT PASS!!!!")
    #   self.driver.quit()

    # try:
    #   logging.info('find status')
    #   click_status=self.driver.find_element(By.XPATH, "//tr[4]/td[2]")
    #   highlight(click_status)
    #   if status=='up':
    #     if click_status.text=="schedulable":
    #        logging.info('status is right')

    #   else:
    #      if click_status.text=="unschedulable":
    #         logging.info('status is right')

        
    # except:
    #   logging.error('Check login error', exc_info=True)
    #   logging.error("NOT PASS!!!!")
    #   self.driver.quit()

    
    # logging.info('########################selenium test stop #########################') 
    # time.sleep(int(self.vars["DelayTime"]))

if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.Test_0005()
  driver.teardown_method()