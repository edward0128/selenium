# Generated by Selenium IDE
import pytest
import time
import json
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class DemoTest():
  def setup_method(self):
    # Start the logging
    
    logging.basicConfig(filename='program.log',format='%(levelname)s %(asctime)s %(message)s', level=logging.INFO)
    logging.info('########################selenium test start ########################')
    logging.info('Logging app started')

    # prepare the web driver
    options = Options()
    #options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    #options.add_argument('--headless')
    #options.add_argument("test=/Users/yu-sung/Documents/ci/profile.test")
    #driver = webdriver.Chrome('./chromedriver', chrome_options=options)
    

    try:
      self.driver = webdriver.Remote(command_executor='http://10.16.1.5:4444/wd/hub',desired_capabilities={'browserName': 'firefox', 'javascriptEnabled': False})
    except:
      logging.error('Prepare webdriver error')
      self.driver.quit()
    
    self.vars={}
    logging.info('Prepare webdriver Ready')
  def teardown_method(self):
    self.driver.quit()
    logging.info('########################selenium test stop ########################') 
    
  def DemoTest_1(self):
    ########################################    
    #Connet and login to the xportal System
    try:
      self.driver.get("http://10.16.44.1:32666/")
    except:
      logging.error('Connect to the Site Error')
      self.driver.quit()

    try:
      logging.info('Start to login the WebSite')
      self.driver.find_element(By.CSS_SELECTOR, ".login").click()
      self.driver.find_element(By.NAME, "email").click()
      self.driver.find_element(By.NAME, "email").send_keys("admin")
      self.vars["password"] = "password"
      self.driver.find_element(By.NAME, "password").send_keys(self.vars["password"])
      self.driver.find_element(By.CSS_SELECTOR, ".jss82").click()
      self.driver.implicitly_wait(10)
    except:
      logging.error('Connect to the Site Error')
      self.driver.quit()
    
    ########################################
    delayTime=1
    try:
      logging.info('Click Infrastructure')
      infastructure=self.driver.find_element(By.XPATH, "/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/ul[1]/li[1]/ul[1]/li[2]/div[1]/span[1]")  
      if infastructure.text == "Infrastructure":
        ActionChains(self.driver).move_to_element(infastructure).click(infastructure).perform()
        time.sleep(delayTime)
    except:
      logging.error('Click Infrastructure Error')
      self.driver.quit()
    ########################################
    try:
      logging.info('Click Host')
      host=self.driver.find_element(By.XPATH, "//ul[@id='/admin/infra_mgmt$Menu']/li")
      if host.text == "Host":
        ActionChains(self.driver).move_to_element(host).click(host).perform()
      time.sleep(delayTime)
    except:
      logging.error('Click Host')
      self.driver.quit()
    ########################################
    try:
      logging.info('Click AvailabilityZone')
      AvailabilityZone=self.driver.find_element(By.XPATH, "//ul[@id='/admin/infra_mgmt$Menu']/li[2]")
      if AvailabilityZone.text == "Availability Zone":
        ActionChains(self.driver).move_to_element(AvailabilityZone).click(AvailabilityZone).perform()
      time.sleep(delayTime)
    except:
      logging.error('Click AvailabilityZone')
      self.driver.quit()
    ########################################
    try:
      logging.info('Click Users')
      users=self.driver.find_element(By.XPATH, "//ul[@id='/admin$Menu']/li[3]/div")
      if users.text == "Users":
        ActionChains(self.driver).move_to_element(users).click(users).perform()
      time.sleep(delayTime)
    except:
      logging.error('Click Users')
      self.driver.quit()
    ########################################
    try:
      logging.info('Click usermanagement')
      usermanagement=self.driver.find_element(By.XPATH, "//ul[@id='/admin/user_mgmt$Menu']/li")
      if usermanagement.text == "User Management":
        ActionChains(self.driver).move_to_element(usermanagement).click(usermanagement).perform()
      time.sleep(delayTime)
    except:
      logging.error('Click usermanagement')
      self.driver.quit()
    ########################################
    try:
      logging.info('Click useractivation')
      useractivation=self.driver.find_element(By.XPATH, "//ul[@id='/admin/user_mgmt$Menu']/li[2]")
      if useractivation.text == "User Activation":
        ActionChains(self.driver).move_to_element(useractivation).click(useractivation).perform()
      time.sleep(delayTime)
    except:
      logging.error('Click useractivation')
      self.driver.quit()
    ########################################   
    try:
      logging.info('Click Projects')
      project=self.driver.find_element(By.XPATH, "/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/ul[1]/li[1]/ul[1]/li[4]/span[1]/span[1]")
      if project.text == "Projects":
        ActionChains(self.driver).move_to_element(project).click(project).perform()
      time.sleep(delayTime)
    except:
      logging.error('Click Projects')
      self.driver.quit
    ########################################
    try:
        logging.info('Click solution')
        solution=self.driver.find_element(By.XPATH, "/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/ul[1]/li[1]/ul[1]/li[5]/span[1]/span[1]")
        if solution.text == "Solutions":
          ActionChains(self.driver).move_to_element(solution).click(solution).perform()
        time.sleep(delayTime)
    except:
      logging.error('Click solution')
      self.driver.quit
    ########################################
    try:
        logging.info('Click flavor')
        flavor=self.driver.find_element(By.XPATH, "/html[1]/body[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/ul[1]/li[1]/ul[1]/li[6]/span[1]/span[1]")
        if flavor.text == "Flavors":
          ActionChains(self.driver).move_to_element(flavor).click(flavor).perform()
        time.sleep(delayTime)
    except:
      logging.error('Click flavor')
      self.driver.quit
    ########################################
    try:
        logging.info('Click overview')
        overview=self.driver.find_element(By.XPATH, "//ul[@id='/project$Menu']/li")
        if overview.text == "Overview":
          ActionChains(self.driver).move_to_element(overview).click(overview).perform()
        time.sleep(delayTime)
    except:
      logging.error('Click overview')
      self.driver.quit
    
    time.sleep(10)
  

if __name__ == "__main__":
  driver = DemoTest()
  driver.setup_method()
  driver.DemoTest_1()
  driver.teardown_method()