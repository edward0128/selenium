# Generated by Selenium IDE
import pytest
import time
import json
import logging
import os
import configparser
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from TestTool.init import *
from TestTool.control import *
from TestTool.task import *
class SeleniumTest():
  def setup_method(self):
    init_log("selenium.log",logging.INFO)
    start_test(os.path.basename(__file__))
    self.vars={}
    read_config(self,"../config.ini")

    try:
      self.driver = init_driver(self)
    except:
      logging.error('Prepare webdriver error', exc_info=True)
      self.driver.quit()
  
  def teardown_method(self):
    end_test(os.path.basename(__file__))
    self.driver.quit()

  def SA_0026(self):
    connect_web(self)
    login_web(self,self.vars["account_user"][0],self.vars["account_password"][0])
    click_button(self,By.XPATH,"//li[4]/span/span","Projects","Click project button")
    
    for i in range(1, 50, 1):
      user_target = "//tr[%d]/td[2]/span" % (i)
      username=(get_text(self,By.XPATH,user_target,"Get project name"))
      if username =="":
        break

      for project in self.vars["project_name"]:
        if username==project:
          ini_users=self.vars["account_user"]
          
          click_button(self,By.XPATH,"//a[contains(.,'%s')]" % (username),username,"Click project %s" % username)
          click_button(self,By.XPATH,"//button[5]/span/span/span","User","Change to user item")
          click_button(self,By.XPATH,"//span[contains(.,'Add Users')]","Add Users","Click Add Users button")

          noitem=True
          for users in ini_users:
            first_user=target=get_text(self,By.XPATH,"//div[2]/div/div/div/div[2]/table/tbody/tr[1]/td[2]/span","Get first user")
            if first_user == "":
              logging.info("No user to create")
              noitem=True
              break
            for count in range(1, 50, 1):
              target=get_text(self,By.XPATH,"//div[2]/div/div/div/div[2]/table/tbody/tr[%d]/td[2]/span" % (count),"Get project user")
              if target == users:
                click_button(self,By.XPATH,"//div[2]/div/div/div/div[2]/table/tbody/tr[%d]/td/span/span/input" % (count),"","Select user")
                logging.info("User %s selected",target)
                noitem=False
              if target =="":
                logging.info("Search to the end")            
                break
          if noitem == False:
            click_button(self,By.XPATH,"//button/span/i ","","Click confirm button to add user to project")
          else:
            click_button(self,By.XPATH,"//span[contains(.,'Cancel')]","Cancel","Click cancel button close useradd ui")
          click_button(self,By.XPATH,"//div/div/i[2]","","Close user item")
          

          


    # for project in self.vars["project_name"]:
    #   try:
    #     print(dict_checkstatus[project])
    #   except:
    #     logging.error("Check project error %s ",project)
    #     self.driver.close()
    #     dict_checkstatus[project]
    logging.info("Check project success")
      
if __name__ == "__main__":
  driver = SeleniumTest()
  driver.setup_method()
  driver.SA_0026()
  driver.teardown_method()